/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author macbookpro
 */
import Utils.ConstantsKey;
import Utils.DBUtils;
import layout.ButtonColumn;
import layout.ColorRenderer;
import model.*;
import patterns.ValidationMessage;
import patterns.factory.*;
import payment.Payment;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class BookController extends JFrame implements ValidationMessage, ActionListener {
    private ArrayList<Room> availableRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_READY
    );
    private ArrayList<Room> bookedRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_BUSY);

    public BookController() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        bigBackGround = new javax.swing.JPanel();
        cusomerInfomationPanel = new  javax.swing.JPanel();
        tfPhone = new java.awt.TextField();
        tfName = new java.awt.TextField();
        tfEmail = new java.awt.TextField();
        labelName = new javax.swing.JLabel();
        labelPhone = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        labelBed = new javax.swing.JLabel();
        labelFromDay = new javax.swing.JLabel();
        btnBook = new javax.swing.JButton();
        labelCustomer = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        datePickerFromDay = new com.github.lgooddatepicker.components.DatePicker();
        labelToDay = new javax.swing.JLabel();
        datePickerToDay = new com.github.lgooddatepicker.components.DatePicker();
        labelTitle = new javax.swing.JLabel();
        tabTable = new javax.swing.JTabbedPane();
        tabRoom = new javax.swing.JPanel();
        labelAvailableRooms = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAvailableRooms = new javax.swing.JTable();
        labelBookedRooms = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBookedRooms = new javax.swing.JTable();
        tabCar = new javax.swing.JPanel();
        labelAvailableCars = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableAvailableCars = new javax.swing.JTable();
        labelBookedCars = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableBookedCars = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        bigBackGround.setBackground(new java.awt.Color(140, 153, 220));

        cusomerInfomationPanel.setBackground(new java.awt.Color(50, 59, 100));

        tfPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPhoneActionPerformed(evt);
            }
        });

        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        tfEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmailActionPerformed(evt);
            }
        });

        labelName.setBackground(new java.awt.Color(255, 255, 255));
        labelName.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelName.setForeground(new java.awt.Color(255, 255, 255));
        labelName.setText("name");

        labelPhone.setBackground(new java.awt.Color(255, 255, 255));
        labelPhone.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelPhone.setForeground(new java.awt.Color(255, 255, 255));
        labelPhone.setText("phone");

        labelEmail.setBackground(new java.awt.Color(255, 255, 255));
        labelEmail.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelEmail.setForeground(new java.awt.Color(255, 255, 255));
        labelEmail.setText("email");

        labelBed.setBackground(new java.awt.Color(255, 255, 255));
        labelBed.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelBed.setForeground(new java.awt.Color(255, 255, 255));
        labelBed.setText("BED");

        labelFromDay.setBackground(new java.awt.Color(255, 255, 255));
        labelFromDay.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelFromDay.setForeground(new java.awt.Color(255, 255, 255));
        labelFromDay.setText("from");

        btnBook.setBackground(new java.awt.Color(255, 255, 255));
        btnBook.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        btnBook.setForeground(new java.awt.Color(102, 102, 255));
        btnBook.setText("book");
        btnBook.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        btnBook.setBorderPainted(false);
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
//                BookRoom
            }
        });

        drawRoomsTables();

        labelCustomer.setBackground(new java.awt.Color(255, 255, 255));
        labelCustomer.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 24)); // NOI18N
        labelCustomer.setForeground(new java.awt.Color(153, 153, 255));
        labelCustomer.setText("customer");

        jComboBox1.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "1", "2", "3" }));

        labelToDay.setBackground(new java.awt.Color(255, 255, 255));
        labelToDay.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N
        labelToDay.setForeground(new java.awt.Color(255, 255, 255));
        labelToDay.setText("to");

        javax.swing.GroupLayout cusomerInfomationPanelLayout = new javax.swing.GroupLayout(cusomerInfomationPanel);
        cusomerInfomationPanel.setLayout(cusomerInfomationPanelLayout);
        cusomerInfomationPanelLayout.setHorizontalGroup(
                cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(cusomerInfomationPanelLayout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cusomerInfomationPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelCustomer)
                                .addGap(108, 108, 108))
                        .addGroup(cusomerInfomationPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(labelToDay, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(labelFromDay, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(cusomerInfomationPanelLayout.createSequentialGroup()
                                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(labelBed, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(23, 23, 23)
                                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(tfPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(tfEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(datePickerFromDay, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(datePickerToDay, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(25, 25, 25))
        );
        cusomerInfomationPanelLayout.setVerticalGroup(
                cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cusomerInfomationPanelLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(labelCustomer)
                                .addGap(39, 39, 39)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(datePickerFromDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelFromDay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelToDay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(datePickerToDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addGroup(cusomerInfomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelBed, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
        );

        labelTitle.setBackground(new java.awt.Color(255, 255, 255));
        labelTitle.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setText("demo hotel");

        tabTable.setBackground(new java.awt.Color(255, 255, 255));
        tabTable.setForeground(new java.awt.Color(102, 102, 255));
        tabTable.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabTable.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 18)); // NOI18N

        tabRoom.setBackground(new java.awt.Color(255, 255, 255));

        labelAvailableRooms.setBackground(new java.awt.Color(255, 255, 255));
        labelAvailableRooms.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 24)); // NOI18N
        labelAvailableRooms.setForeground(new java.awt.Color(153, 153, 255));
        labelAvailableRooms.setText("available availableRooms");
        jScrollPane2.setViewportView(tableAvailableRooms);

        labelBookedRooms.setBackground(new java.awt.Color(255, 255, 255));
        labelBookedRooms.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 24)); // NOI18N
        labelBookedRooms.setForeground(new java.awt.Color(153, 153, 255));
        labelBookedRooms.setText("Booked availableRooms");
        jScrollPane1.setViewportView(tableBookedRooms);

        javax.swing.GroupLayout tabRoomLayout = new javax.swing.GroupLayout(tabRoom);
        tabRoom.setLayout(tabRoomLayout);
        tabRoomLayout.setHorizontalGroup(
                tabRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tabRoomLayout.createSequentialGroup()
                                .addGroup(tabRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(tabRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(tabRoomLayout.createSequentialGroup()
                                                        .addGap(63, 63, 63)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(tabRoomLayout.createSequentialGroup()
                                                        .addGap(30, 30, 30)
                                                        .addGroup(tabRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(labelBookedRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(labelAvailableRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(37, Short.MAX_VALUE))
        );
        tabRoomLayout.setVerticalGroup(
                tabRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tabRoomLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(labelAvailableRooms)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelBookedRooms)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
        );

        tabTable.addTab("Room", tabRoom);

        tabCar.setBackground(new java.awt.Color(255, 255, 255));

        labelAvailableCars.setBackground(new java.awt.Color(255, 255, 255));
        labelAvailableCars.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 24)); // NOI18N
        labelAvailableCars.setForeground(new java.awt.Color(153, 153, 255));
        labelAvailableCars.setText("available cars");
        jScrollPane5.setViewportView(tableAvailableCars);

        labelBookedCars.setBackground(new java.awt.Color(255, 255, 255));
        labelBookedCars.setFont(new java.awt.Font("UTM Ericsson Capital", 0, 24)); // NOI18N
        labelBookedCars.setForeground(new java.awt.Color(153, 153, 255));
        labelBookedCars.setText("Booked cars");
        jScrollPane6.setViewportView(tableBookedCars);

        javax.swing.GroupLayout tabCarLayout = new javax.swing.GroupLayout(tabCar);
        tabCar.setLayout(tabCarLayout);
        tabCarLayout.setHorizontalGroup(
                tabCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tabCarLayout.createSequentialGroup()
                                .addGroup(tabCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(tabCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(tabCarLayout.createSequentialGroup()
                                                        .addGap(63, 63, 63)
                                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(tabCarLayout.createSequentialGroup()
                                                        .addGap(30, 30, 30)
                                                        .addGroup(tabCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(labelBookedCars, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(labelAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addContainerGap(37, Short.MAX_VALUE))
        );
        tabCarLayout.setVerticalGroup(
                tabCarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tabCarLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(labelAvailableCars)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelBookedCars)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
        );

        tabTable.addTab("Car", tabCar);

        javax.swing.GroupLayout bigBackGroundLayout = new javax.swing.GroupLayout(bigBackGround);
        bigBackGround.setLayout(bigBackGroundLayout);
        bigBackGroundLayout.setHorizontalGroup(
                bigBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bigBackGroundLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bigBackGroundLayout.createSequentialGroup()
                                .addContainerGap(33, Short.MAX_VALUE)
                                .addComponent(cusomerInfomationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(tabTable, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))
        );
        bigBackGroundLayout.setVerticalGroup(
                bigBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bigBackGroundLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(labelTitle)
                                .addGap(27, 27, 27)
                                .addGroup(bigBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tabTable, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cusomerInfomationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bigBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(bigBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }
    // </editor-fold>

    private void roomDetailDialog(Room room) {

//        if (modelFrom.getValue() == null) {
//            errorMessage("Input from Date");
//            return;
//        }
//
//        if (modelTo.getValue() == null) {
//            errorMessage("Input to Date");
//            return;
//        }

        JFrame frame = new JFrame();
        JDialog d = new JDialog(frame, "Payment", true);
        d.setLayout(new FlowLayout());
        JButton card = new JButton("CARD");
        JButton cash = new JButton("CASH");

        cash.addActionListener(e -> {
            d.setVisible(false);
            room.setPaymentMethod(ConstantsKey.PAYMENT_CASH);
            doBookRoom(room);
            Payment payment = new Payment();
            payment.payment(ConstantsKey.PAYMENT_CASH);
        });

        card.addActionListener(e -> {
            d.setVisible(false);
            room.setPaymentMethod(ConstantsKey.PAYMENT_CARD);
            doBookRoom(room);
            Payment payment = new Payment();
            payment.payment(ConstantsKey.PAYMENT_CARD);
        });
        d.add(new JLabel("Need To Pay"), BorderLayout.SOUTH);
        String price = payMoney(Integer.parseInt(room.getPrice()));
        if (price.contains("-")) {
            errorMessage("to date is smaller than from date");
            return;
        }
        d.add(new JLabel(price + " $"), BorderLayout.SOUTH);
//        d.add(new JLabel(room.getCustomerPhone()), BorderLayout.SOUTH);
        d.add(card);
        d.add(cash);
        d.setSize(300, 100);
        d.setBounds(300, 200, 200, 200);
        d.setVisible(true);
    }

    private void roomCheckoutDialog(Room room) {
        JFrame f = new JFrame();
        JDialog d = new JDialog(f, "Checkout", true);
        d.setLayout(new FlowLayout());
        JButton checkout = new JButton("Confirm");

        checkout.addActionListener(e -> {
            d.setVisible(false);
            DBUtils.checkoutRoom(room);
            availableRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_BUSY);
            refreshData();
        });
        d.add(new JLabel("Do you wanna checkout?"), BorderLayout.SOUTH);
//        d.add(new JLabel(room.getCustomerPhone()), BorderLayout.SOUTH);
        d.add(checkout);
        d.setSize(300, 100);
        d.setBounds(300, 200, 200, 200);
        d.setVisible(true);
    }

    private void drawRoomsTables(){
        // ---------------------------------------------------------------------------------------------------
        String columns_available[] = {"Room", "Bed", "Type", "Price", "Book"};
        DefaultTableModel availableRoom = new DefaultTableModel(columns_available, 0);
        tableAvailableRooms.setModel(availableRoom);

        for (Room room : availableRooms) {
            if (room.getAvailable().equals("Ready")){
                Object[] data = {"R" + room.getRoomNumber(), room.getCapacity() + " bed", room.getRoomType(), room.getPrice() + "$", "Book"};
                availableRoom.addRow(data);
            }
        }

        tableAvailableRooms.setDefaultRenderer(Color.class, new ColorRenderer(true));
        Action deleteAvailable = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                int modelRow = Integer.valueOf(e.getActionCommand());
                Room room = availableRooms.get(modelRow);
                roomDetailDialog(room);
            }
        };

        ButtonColumn buttonColumnAvailable = new ButtonColumn(tableAvailableRooms, deleteAvailable, 4);
        buttonColumnAvailable.setMnemonic(KeyEvent.VK_D);

        // ---------------------------------------------------------------------------------------------------

        String columns_booked[] = {"Room", "Bed", "Type", "Price", "Checkout"};
        DefaultTableModel bookedRoom = new DefaultTableModel(columns_booked, 0);
        tableBookedRooms.setModel(bookedRoom);
        for (Room room : bookedRooms) {
            if (room.getAvailable().equals("Busy")){
                Object[] data = {"R" + room.getRoomNumber(), room.getCapacity() + " bed", room.getRoomType(), room.getPrice() + "$", "Checkout"};
                bookedRoom.addRow(data);
            }
        }

        tableBookedRooms.setDefaultRenderer(Color.class, new ColorRenderer(true));
        Action deleteCheckout = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                int modelRow = Integer.valueOf(e.getActionCommand());
                Room room = bookedRooms.get(modelRow);
                roomCheckoutDialog(room);
            }
        };

        ButtonColumn buttonColumnCheckout = new ButtonColumn(tableBookedRooms, deleteCheckout, 4);
        buttonColumnCheckout.setMnemonic(KeyEvent.VK_D);

    }

    private void drawCarsTables(){
        String columns[] = {"Car", "Seat", "Type", "Price"};
        DefaultTableModel availableCar = new DefaultTableModel(columns, 0);
        tableAvailableCars.setModel(availableCar);

        for (Room room : availableRooms) {
            if (room.getAvailable().equals("Ready")){
                Object[] data = {"R" + room.getRoomNumber(), room.getCapacity() + " bed", room.getRoomType(), room.getPrice() + "$"};
                availableCar.addRow(data);
            }
        }

        DefaultTableModel bookedCar = new DefaultTableModel(columns, 0);
        tableBookedCars.setModel(bookedCar);
        for (Room room : availableRooms) {
            if (room.getAvailable().equals("Busy")){
                Object[] data = {"R" + room.getRoomNumber(), room.getCapacity() + " bed", room.getRoomType(), room.getPrice() + "$"};
                bookedCar.addRow(data);
            }
        }
    }

    private void doBookRoom(Room room) {
        room.setBook(true);
        room.setAvailable(ConstantsKey.ROOM_STATUS_BUSY);
        room.setCustomerName(tfName.getText());
        room.setCustomerPhone(tfPhone.getText());
        room.setCustomerEmail(tfEmail.getText());
        String fromDate = datePickerFromDay.getDate().toString();
        String[] from = fromDate.split("-");
        String toDate = datePickerToDay.getDate().toString();
        String[] to = toDate.split("-");

        room.setFromDate(from[2] + "/" + from[1] + "/" + from[0]);
        room.setToDate(to[2] + "/" + to[1] + "/" + to[0]);
        BookRoom bookRoom = new BookRoom(room);
        bookRoom.setErrorMessage(this);
        bookRoom.tryToBook();

        availableRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_READY);
        refreshData();
    }

    private void doBookCar(Car car) {
        car.setBook(true);
        car.setAvailable(ConstantsKey.ROOM_STATUS_BUSY);
        car.setCustomerName(tfName.getText());
        car.setCustomerPhone(tfPhone.getText());
        car.setCustomerEmail(tfEmail.getText());
        String fromDate = datePickerFromDay.getDate().toString();
        String[] from = fromDate.split("-");
        String toDate = datePickerToDay.getDate().toString();
        String[] to = toDate.split("-");

        car.setFromDate(from[2] + "/" + from[1] + "/" + from[0]);
        car.setToDate(to[2] + "/" + to[1] + "/" + to[0]);
        BookCar bookCar = new BookCar(car);
        bookCar.setErrorMessage(this);
        bookCar.tryToBook();

        availableRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_READY);
        refreshData();
    }

    private void refreshData() {
        availableRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_READY);
        bookedRooms = DBUtils.getRoomsBusyOrReady(false, ConstantsKey.ROOM_STATUS_BUSY );

        tableBookedRooms.removeAll();
        tableAvailableRooms.removeAll();
        drawRoomsTables();
        tableBookedRooms.revalidate();
        tableBookedRooms.repaint();
        tableAvailableRooms.revalidate();
        tableAvailableRooms.repaint();

    }

    private String payMoney(Integer moneyPerDay) {
//        SimpleDateFormat myFormat = new SimpleDateFormat("dd MM yyyy");
//        String fromDate = datePickerFromDay.getDate().toString();
//        String[] from = fromDate.split("-");
//        String toDate = datePickerToDay.getDate().toString();
//        String[] to = toDate.split("-");
//        try {
//            Date date1 = myFormat.parse(from[2] + " " + from[1] + " " + from[0]);
//            Date date2 = myFormat.parse(to[2] + " " + to[1] + " " + to[0]);
//            long diff = date2.getTime() - date1.getTime();
//            long days = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
//            return (days * moneyPerDay) + "";
////            System.out.println("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));
//        } catch (ParseException exx) {
//            exx.printStackTrace();
//        }
        return "";
    }

    @Override
    public void actionPerformed(ActionEvent e) {

    }

    @Override
    public void errorMessage(String errorMessage) {

    }

    @Override
    public void successMessage(String successMessage) {

    }
    // End of variables declaration

    private void tfEmailActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void tfPhoneActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookController().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel bigBackGround;
    private javax.swing.JButton btnBook;
    private javax.swing.JPanel cusomerInfomationPanel;
    private com.github.lgooddatepicker.components.DatePicker datePickerFromDay;
    private com.github.lgooddatepicker.components.DatePicker datePickerToDay;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labelAvailableCars;
    private javax.swing.JLabel labelAvailableRooms;
    private javax.swing.JLabel labelBed;
    private javax.swing.JLabel labelBookedCars;
    private javax.swing.JLabel labelBookedRooms;
    private javax.swing.JLabel labelCustomer;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelFromDay;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelToDay;
    private javax.swing.JPanel tabCar;
    private javax.swing.JPanel tabRoom;
    private javax.swing.JTabbedPane tabTable;
    private javax.swing.JTable tableAvailableCars;
    private javax.swing.JTable tableAvailableRooms;
    private javax.swing.JTable tableBookedCars;
    private javax.swing.JTable tableBookedRooms;
    private java.awt.TextField tfEmail;
    private java.awt.TextField tfName;
    private java.awt.TextField tfPhone;
}
